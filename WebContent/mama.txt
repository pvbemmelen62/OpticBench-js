======================= gaussian-elimination.js : ====================
/**
 * Adapted from
 * https://martin-thoma.com/solving-linear-equations-with-gaussian-elimination/
 */
function Gauss() {
}

/**
 * Calculates x such that matrix * x = vector .
 */
Gauss.vectorInverse = function(matrix, vector) {
  var A = matrix;
  var v = vector;
  var nr = A.length;
  var nc = A[0].length;
  if(!(v.length == nr)) throw "incompatible sizes";
  
  var Av = Matrix.copy(A);
  for(var r=0; r<nr; ++r) {
    Av[r].push(v[r]);
  }
  for(var i = 0; i < nr; i++) {
    // Search for maximum among Av[i][i] ... Av[nr-1][i]
    var maxEl = Math.abs(Av[i][i]);
    var maxRow = i;
    for (var r = i + 1; r < nr; ++r) {
      if (Math.abs(Av[r][i]) > maxEl) {
        maxEl = Math.abs(Av[r][i]);
        maxRow = r;
      }
    }
    // Swap row i with row maxRow
    for(var c = i; c < nc + 1; ++c) {
      var tmp = Av[maxRow][c];
      Av[maxRow][c] = A[i][c];
      Av[i][c] = tmp;
    }
    // Make all rows below row i have 0 in column i
    for(r = i + 1; r < nr; ++r) {
      var s = -Av[r][i] / Av[i][i];
      var c = i;
      Av[r][c] = 0;
      ++c;
      for( ; c < nc + 1; ++c) {
        Av[r][c] += s * Av[i][c];
      }
    }
    if(Gauss.debug != undefined) {
      Gauss.debug(Av);
    }
  }
  // Av now has upper triangular form.
  
  // Sweep to give the A in Av identity form:
  for(var r=nr-1; r>=0; --r) {
    // scale row r to have a 1 in column r
    Av[r][nc] /= Av[r][r];
    Av[r][r] = 1;
    // make all rows above row r have a 0 in column r
    for(var r2=r-1; r2>=0; --r2) {
      var s = -Av[r2][r];
      Av[r2][r] = 0;
      Av[r2][nc] = Av[r2][nc] + s * Av[r][nc];
    }
  }
  var x = new Array(nr);
  for(r=0; r<nr; ++r) {
    x[r] = Av[r][nc];
  }
  return x;
}
======================= matrix.js : ====================

// Square matrix
Matrix = function(m) {
    this.m = m;
    var numCols = m[0].length;
    for(var r=1; r<m.length; ++r) {
        var okay = m[r].length == numCols;
        if(!okay) {
            throw "Invalid input: matrix has rows of varying length.";
        }
    }
};
Matrix.copy = function(m) {
  var A = new Array(m.length);
  for(var r=0; r<m.length; ++r) {
      A[r] = new Array(m[r].length);
      for(var c=0; c<m[r].length; ++c) {
          A[r][c] = m[r][c];
      }
  }
  return A;
}

Matrix.prototype = {
        // multiply matrix with vector x
        multiply : function(x) {
            var m = this.m;
            var result = new Array(m.length);
            for(var r=0; r<m.length; ++r) {
                result[r] = 0;
                for(var c=0; c<m[0].length; ++c) {
                    result[r] += m[r][c]*x[c];
                }
            }
            return result;
        },
        copy : function() {
            var m = this.m;
            var result = new Array(m.length);
            for(var r=0; r<m.length; ++r) {
                result[r] = new Array(m[r].length);
                for(var c=0; c<m[r].length; ++c) {
                    result[r][c] = m[r][c];
                }
            }
            return result;
        },
        // Return x such that:  Matrix * x = b
        solve : function(b) {
            if(! this.m.length == b.length) {
                throw "Invalid argument: b has wrong length";
            }
            var Ab = this.copy();
            for(var r=0; r<Ab.length; ++r) {
                Ab[r].push(b[r]);
            }
            var x = gauss(Ab, this.debug);
            return x;
        },
        toString: function(maxWidth) {
          var m = this.m;
          var nr = m.length;
          var nc = m[0].length;
          var txt = "{\n";
          for(var r=0; r<nr; ++r) {
            txt += "  {";
            for(var c=0; c<nc; ++c) {
              var s = String(m[r][c]);
              s = s.substring(0,maxWidth);
              txt += s;
              if(c<nc-1) {
                txt += ", ";
              }
            }
            txt += "  },\n";
          }
          txt += "}\n";
          return txt;
        },
        debug: function(m) {
          alert(this.toString(m));
          //alert("mama");
        }
};======================= test-gaussian-elimination.html : ====================
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<style>
</style>
<script src="ArrayFormatter.js"></script>
<script src="matrix.js"></script>
<script src="gaussian-elimination.js"></script>
<script>
  function debug(s) {
    var myDiv = document.getElementById("myContainer");
    var pre = document.createElement("pre");
    var txtNode = document.createTextNode(s);
    pre.appendChild(txtNode);
    myDiv.appendChild(pre);
  }
  function myMove1() {

    alert("in MyMove1()");
    
    var A = 
      [
        [ 1, 2, 3, 4],
        [ 2, 2, 2, 3],
        [ 0,-2, 1, 2],
        [ 3, 2, 3, 4]
      ];

    var b = [ 2, 3, 4, 5];

    Gauss.debug = debug;
    
    var x = Gauss.vectorInverse(A,b);

    var txt =
      "A: " + ArrayFormatter.twoDim(A, 8, "\n", ", ") + "\n" +
      "b: " + b + "\n" +
      "x: " + x + "\n";
    debug(txt);
  }
</script>
</head>
<body>

	<p>
		<button onclick="myMove1()">Click Me</button>
	</p>

	<div id="myContainer">
	</div>

</body>
</html>
